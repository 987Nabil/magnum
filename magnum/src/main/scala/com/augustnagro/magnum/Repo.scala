package com.augustnagro.magnum

import javax.sql.DataSource

/** A read & write data repository
  *
  * @tparam EC
  *   'Entity Creator', which should have all fields of E minus those
  *   auto-generated by the database. Can be the same type as E.
  * @tparam E
  *   database entity class
  * @tparam ID
  *   id type of E
  */
open class Repo[EC, E, ID](schema: DbSchema[EC, E, ID])
    extends ImmutableRepo[E, ID](schema):

  /** Deletes an entity using its id */
  def delete(entity: E)(using DbCon): Unit = schema.delete(entity)

  /** Deletes an entity using its id */
  def deleteById(id: ID)(using DbCon): Unit = schema.deleteById(id)

  /** Deletes ALL entities */
  def truncate()(using DbCon): Unit = schema.truncate()

  /** Delete all provided entities */
  def deleteAll(entities: Iterable[E])(using DbCon): Unit =
    schema.deleteAll(entities)

  /** Deletes all entities with an Iterable of ids */
  def deleteAllById(ids: Iterable[ID])(using DbCon): Unit =
    schema.deleteAllById(ids)

  /** Insert and return entity E */
  def insert(entityCreator: EC)(using DbCon): E = schema.insert(entityCreator)

  /** Insert and return all new entities */
  def insertAll(entityCreators: Iterable[EC])(using DbCon): Vector[E] =
    schema.insertAll(entityCreators)

  /** Update the entity */
  def update(entity: E)(using DbCon): Unit = schema.update(entity)

  /** Update all entities */
  def updateAll(entities: Iterable[E])(using DbCon): Unit =
    schema.updateAll(entities)
